preambl$treatment <- trt
preambl$condition <- cond
relsaweights       <- rbind(relsaweights,
cbind(id        = preambl$id,
day       = preambl$day,
treatment = preambl$treatment,
condition = preambl$condition,
rw))
}
relsaweights
# Unique animals in the query set
tiere          <- unique(df$id)
# calculate RELSA max for each model (time-independent)
relsamax <- NULL
ddf      <- NULL
for (j in 1:length(tiere)){
relsamax   <- rbind(relsamax, data.frame(id        = tiere[j],
treatment = as.character(df[df$id==tiere[j], 3][1]),
condition = as.character(df[df$id==tiere[j], 4][1]),
relsa     = max( df[df$id==tiere[j], "rms"], na.rm=TRUE) ))
}
# color option the RELSA max table
if(is.null(colorlabel) ==TRUE){
}else{
relsamax$color = colorlabel
}
# add a studylabel for later RELSA max discrimination and subsetting
if(is.null(studylabel)){
}else{
relsamax$label <- studylabel
}
# add a label for the prospective severity
if(is.null(severity)){
}else{
relsamax$severity <- severity
}
### PCA -variable contributions for the first 2 dimensions
q         <- testset[5:dim(testset)[2]]
if((5-sum(apply(q,2,sum, na.rm=TRUE)==0))==1){
contributions <- NA
}else{
# drop the drops
if(sum(names(q) %in% dropsQuery)==0){
q   <- q[complete.cases(q),]
}else{
nn  <- which(names(q) %in% dropsQuery)
q   <- q[,-nn]
q   <- q[complete.cases(q),]
}
q      <- q[complete.cases(q),]
pca    <- PCA(q, scale.unit = TRUE, graph = FALSE)
if(pcadims==1){
contributions <- pca$var$contrib[, 1]
}else{
contributions <- apply(pca$var$contrib[, 1:pcadims ],1,sum)
}
}
### Calculate the most changing RELSA Weight!
V <- NULL
for(t in 1:length(tiere)){
v    <- relsaweights[deltascores$id%in%tiere[t],]
V    <- rbind(V, suppressWarnings( apply( v[5:dim(v)[2]],2, max, na.rm=TRUE )))
is.na(V) <- sapply(V, is.infinite)
}
Change           <- t(data.frame(apply(V,2,mean, na.rm=TRUE)))
colnames(Change) <- colnames(V)
rownames(Change) <- 1
ChangeSD           <- t(data.frame(apply(V,2,sd, na.rm=TRUE)))
colnames(ChangeSD) <- colnames(V)
rownames(ChangeSD) <- 1
Change  [is.nan(Change)]   <- NA
ChangeSD[is.nan(ChangeSD)] <- NA
### Example Animals anschauen
if(is.null(animalnr)){
}else{
tiere <- unique(df$id)
dat   <- df[df$id==tiere[animalnr], ]
plot(dat$day, dat$rms, pch=19, type="b", ylim=c(ymin,ymax), xlab="time", ylab="RELSA score")
abline(h=1, lty=2, lwd=2)
#points(dat$day[which(dat$rms==max(dat$rms, na.rm=TRUE))][which(as.numeric(is.na(dat$rms))==1)[1]-1], max(dat$rms, na.rm=TRUE), pch=1, lwd=2, cex=2.2, col="red")
#text(dat$day[which(dat$rms==max(dat$rms, na.rm=TRUE))]  , max(dat$rms, na.rm=TRUE),
#     labels=max(dat$rms, na.rm=TRUE), cex=0.9, pos=4, col="red")
}
library(RELSA)
library(RELSA)
library("FactoMineR")
mycolors       <- c("darkred","red", "purple", "orange", "pink", "cyan", "darkgreen")
querydata      <- "C:/MHH Bleich/Papers/PostOPPaper/Data/sepsis_ffm_1h.txt"
sepsis_ffm_tot <- relsa_wrapper(querydata = querydata,
treatment  = NULL,
condition  = "Endpoint",
normthese  = c("hr","hrv", "temp", "act"),
turnsQuery = "hr",
dropsQuery = NULL,
animalnr   = 1,
studylabel = "A",
colorlabel = mycolors[1],
ymax       = 4)
sepsis_ffm_tot <- relsa_wrapper(querydata = querydata,
treatment  = NULL,
condition  = "Endpoint",
normthese  = c("hr","hrv", "temp", "act"),
turnsQuery = "hr",
dropsQuery = NULL,
animalnr   = 2,
studylabel = "A",
colorlabel = mycolors[1],
ymax       = 4)
library(RELSA)
library(tidyr)
library("FactoMineR")
library(ggplot2)
library(ggpubr)
# long to wide
data_wide           <- spread(df, variable, value)
colnames(data_wide) <- c("id", "treatment", "condition",  "day", "label",
"cens", "act", "bp", "hr", "hrv", "temp")
data_wide[data_wide$day%in% 0, "day"] <- -1
data_wide           <- data_wide[, c("id", "treatment", "condition","day","hr", "hrv", "temp", "act")]
querydata           <- data_wide
head(querydata)
source('C:/MHH Bleich/Aktuelles/Knape FFM/R/Load_full_48h_besser.R', echo=TRUE)
library(readxl)
library(reshape2)
knape_extract <- function(path=NULL, varlist=NULL, treatment=NA, condi=NULL, label=NULL){
# load into long format
df <- NULL
for(i in 1:length(varlist)){
cache   <- data.frame(read_excel(path, sheet = i ))
ID      <- colnames(cache)[2:dim(cache)[2]]
inter   <- melt(cache, id.vars = "t")
inter$condition <- NULL
inter$condition <- condi[i]
inter$measure   <- NULL
inter$measure   <-varlist[i]
colnames(inter) <- c("t", "id", "value", "condition", "variable")
df      <- rbind(df, data.frame( inter))
}
df$id     <- sub("^X", "", df$id)
df$id     <- as.factor(df$id)
df$treatment <- treatment
# add condi label
if(is.null(label)==TRUE){
df      <- df[,c("id", "treatment", "condition", "t", "variable","value")]
}else{
df$label <- NULL
df$label <- label
df       <- df[,c("id", "treatment", "condition", "t", "variable","label","value")]
}
return(df)
}
library(RELSA)
library(RELSA)
library("FactoMineR")
mycolors       <- c("darkred","red", "purple", "orange", "pink", "cyan", "darkgreen")
querydata      <- "C:/MHH Bleich/Papers/PostOPPaper/Data/sepsis_ffm_1h.txt"
sepsis_ffm_tot <- relsa_wrapper(querydata = querydata,
treatment  = NULL,
condition  = "Endpoint",
normthese  = c("hr","hrv", "temp", "act"),
turnsQuery = "hr",
dropsQuery = NULL,
animalnr   = 2,
studylabel = "A",
colorlabel = mycolors[1],
ymax       = 4)
library(RELSA)
library("FactoMineR")
mycolors       <- c("darkred","red", "purple", "orange", "pink", "cyan", "darkgreen")
querydata      <- "C:/MHH Bleich/Papers/PostOPPaper/Data/sepsis_ffm_1h.txt"
sepsis_ffm_tot <- relsa_wrapper(querydata = querydata,
treatment  = NULL,
condition  = "Endpoint",
normthese  = c("hr","hrv", "temp", "act"),
turnsQuery = "hr",
dropsQuery = NULL,
animalnr   = 2,
studylabel = "A",
colorlabel = mycolors[1],
ymax       = 4)
sepsis_ffm_tot
sepsis_ffm_tot$Rw
sepsis_ffm_tot$Rw[2, c("bwc","hr","hrv","temp","act")] - sepsis_ffm_tot$Rw[2, c("bwc","hr","hrv","temp","act")]
sepsis_ffm_tot$Rw[2, c("bwc","hr","hrv","temp","act")] - sepsis_ffm_tot$Rw[3, c("bwc","hr","hrv","temp","act")]
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day==2, c("bwc","hr","hrv","temp","act")]
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day==3, c("bwc","hr","hrv","temp","act")]
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day==2, c("hr","hrv","temp","act")]
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day==3, c("hr","hrv","temp","act")]
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day==2, c("hr","hrv","temp","act")] -
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day==3, c("hr","hrv","temp","act")]
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day==c(2,3),"rms"]
sepsis_ffm_tot$df[ sepsis_ffm_tot$Rw$day==c(2,3),"rms"]
sepsis_ffm_tot$df
sepsis_ffm_tot$df[ sepsis_ffm_tot$Rw$day%in%c(2,3),"rms"]
(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")] -
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day  ==3, c("hr","hrv","temp","act")]) /
mean(sepsis_ffm_tot$df[ sepsis_ffm_tot$Rw$day%in%c(2,3),"rms"])
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day  ==3, c("hr","hrv","temp","act")])
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day  ==3, c("hr","hrv","temp","act")]
mean((sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")]
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day  ==3, c("hr","hrv","temp","act")])) - sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day  ==3, c("hr","hrv","temp","act")] /
mean(sepsis_ffm_tot$df[ sepsis_ffm_tot$Rw$day%in%c(2,3),"rms"])
# WALD Test
mean((sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")]
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day  ==3, c("hr","hrv","temp","act")])) - sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day  ==3, c("hr","hrv","temp","act")] /
mean(sepsis_ffm_tot$df[ sepsis_ffm_tot$Rw$day%in%c(2,3),"rms"])
sepsis_ffm_tot$df[ sepsis_ffm_tot$Rw$day%in%c(2,3),"rms"]
mean((sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")]
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day  ==3, c("hr","hrv","temp","act")]))
mean((sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")]
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day  ==3, c("hr","hrv","temp","act")])
mean((sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")]
)
)
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")]
mean(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")])
colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")])
mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")]))
mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")]))-
mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==3, c("hr","hrv","temp","act")]))
colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")])
sem
std <- function(x) sd(x)/sqrt(length(x))
mean(std(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")]))
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")]
mean(sepsis_ffm_tot$df[ sepsis_ffm_tot$Rw$day%in%c(2,3),"rms"])
# WALD Test
mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")]))-
mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==3, c("hr","hrv","temp","act")]))/
mean(sepsis_ffm_tot$df[ sepsis_ffm_tot$Rw$day%in%c(2,3),"rms"])
# WALD Test
mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")]))-
mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==3, c("hr","hrv","temp","act")]))/
mean(sepsis_ffm_tot$df[ sepsis_ffm_tot$Rw$day%in%c(2,3),"rms"]^2)
sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==2, c("hr","hrv","temp","act")]
mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==0, c("hr","hrv","temp","act")]))-
mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==3, c("hr","hrv","temp","act")]))/
mean(sepsis_ffm_tot$df[ sepsis_ffm_tot$Rw$day%in%c(2,3),"rms"]^2)
# WALD Test
mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==0, c("hr","hrv","temp","act")]))-
mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==3, c("hr","hrv","temp","act")]))/
mean(sepsis_ffm_tot$df[ sepsis_ffm_tot$Rw$day%in%c(0,3),"rms"]^2)
library(RELSA)
library("FactoMineR")
mycolors       <- c("darkred","red", "purple", "orange", "pink", "cyan", "darkgreen")
querydata      <- "C:/MHH Bleich/Papers/PostOPPaper/Data/sepsis_ffm_1h.txt"
sepsis_ffm_tot <- relsa_wrapper(querydata = querydata,
treatment  = NULL,
condition  = "Endpoint",
normthese  = c("hr","hrv", "temp", "act"),
turnsQuery = "hr",
dropsQuery = NULL,
animalnr   = 2,
studylabel = "A",
colorlabel = mycolors[1],
ymax       = 4)
# ^\index\.md$
std <- function(x) sd(x)/sqrt(length(x))
# WALD Test
W
for(i in 1:10){
W[i] <- mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==0, c("hr","hrv","temp","act")]))-
mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==3, c("hr","hrv","temp","act")]))/
mean(sepsis_ffm_tot$df[ sepsis_ffm_tot$Rw$day%in%c(0,3),"rms"]^2)
}
# WALD Test
W <- NULL
for(i in 1:10){
W[i] <- mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==0, c("hr","hrv","temp","act")]))-
mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==3, c("hr","hrv","temp","act")]))/
mean(sepsis_ffm_tot$df[ sepsis_ffm_tot$Rw$day%in%c(0,3),"rms"]^2)
}
W
# WALD Test
W <- NULL
for(i in 1:10){
W[i] <- mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==0, c("hr","hrv","temp","act")]))-
mean(colMeans(sepsis_ffm_tot$Rw[ sepsis_ffm_tot$Rw$day ==i, c("hr","hrv","temp","act")]))/
mean(sepsis_ffm_tot$df[ sepsis_ffm_tot$Rw$day%in%c(0,i),"rms"]^2)
}
W
plot(W)
### Training the model ##############
# 1. load package
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. define the included variables in the model (vars)
# 4. define the negative variables that are "turned"
# 5. normalize the variables to a range [0;100] (relsa_norm)
# 6. calculate relsa model characteristics (relsa_baseline)
library(RELSA)
library(ROCR)
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
### Preprocessing (normalization)
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
relsa <- function(set, bsl, a=1, drop=NULL, turnvars=NULL, relsaNA=NA ){
### Build a data subset defined by the chosen animal
whichanimal  <- unique(set$id )
subdata      <- set[set$id == whichanimal[a], 4:dim(set)[2]]
days         <- subdata$day
### Drop variables (check if the dropped vars are in the set, if so: do it)
if( length(turnvars[turnvars %in% names(subdata)])==0 ){
turnvars   <- NULL
}else{}
if( is.null(drop)==TRUE ){
}else{
subdata[names(subdata) %in% drop] <- NULL
turnvars                          <- turnvars[!(turnvars %in% drop)]
}
### calculate difference matrix for the animal & turn "positive" variables
if( is.null(turnvars)==TRUE ){
delta            <- 100 - subdata[-1]
bsdelta          <- 100 - bsl$maxdelta
}else{
delta            <- 100 - subdata[-1]
delta[,turnvars] <- abs(delta[, turnvars]) #* -1
bsdelta          <- abs(100 - bsl$maxdelta)     # for the extreme values of baseline vars
bsdelta[turnvars]<- abs(bsdelta[turnvars])    #* -1
}
### set all negative values to NA - otherwise zero would allow usage in the mean!
delta[delta<0]     <- 0
# round delta
delta              <- round(delta,2)
# get the order of names in delta for baseline relsa score 2
namen              <- names(delta)
### RELSAs
# If all is empty, there goes NA everywhere
if(length(delta)==0 ){
delta              <- cbind(day= days, NA)
relsa_3            <- NULL
relsa_3            <- round( wfactor ,2)
relsa_3            <- cbind(relsa_3, wf=NA)
relsa_3            <- cbind(relsa_3, rms=NA)
relsa_3            <- cbind(relsa_3, rmsplus=NA)
}else{
# weighting the relsa score by knowing the extreme values from the training set
wfactor   <- NULL
for(r in 1:dim(delta)[1]){
wfactor          <- as.data.frame(round( rbind(wfactor, delta[r,] / bsdelta[namen]), 2))
#wfactor          <- as.data.frame(round( rbind(wfactor, delta[r,]^2 / bsdelta[namen]^2), 2)) # exp alternative
}
### set all negative values to NA
wfactor[wfactor<0] <- NA
### calculate wRELSA and Weight factor alone
wf_sum             <- round(apply(wfactor, 1, sum, na.rm=T),2 ) # Summarize
wf                 <- wf_sum  / (dim(wfactor)[2] - apply(apply(wfactor,2, is.na),1,sum))
if(length(wf)>0){
wf[is.nan(wf)] <- relsaNA
}else{}
# if weights are smaller 0, kill them!
wf[wf <0]        <- relsaNA
# get NA positions for rms correction
na.idx           <- is.na(wf)
####### RELSA: score 2: METHOD 2 (RMS) #######
# RMS RELSA
rms     <- c()
for(l in 1:dim(wfactor)[1]){
RMS                <- sqrt( sum( wfactor[l, ]^2 , na.rm=TRUE )/ (length(wfactor[l, ]) - sum(is.na(wfactor[l, ])))  )
# RMS                <- sqrt( sum( wfactor[l, ]^2 , na.rm=TRUE ) * ((length(wfactor[l, ]) - sum(is.na(wfactor[l, ])))/length(wfactor[l, ]))  )
# RMS                <- sum( wfactor[l, ] ,na.rm=TRUE )/ (length(wfactor[l, ]) - sum(is.na(wfactor[l, ])))
# RMS                <- sqrt( sum( wfactor[l, ]^2 ,na.rm=TRUE )) # old
if( sum(is.na(wfactor[l, ]))==length(names(wfactor)) ){ RMS<-NA} else {}
rms[l]             <- RMS
}
rms[na.idx]          <- NA
rms     <- as.data.frame(rms)
####### RELSA: finalizing the results #######
relsa_3            <- NULL
relsa_3            <- round( wfactor ,2)
relsa_3            <- as.data.frame(relsa_3)
relsa_3            <- cbind(relsa_3, wf)
relsa_3            <- cbind(days, relsa_3)
if(all(is.na(rms))==TRUE){
relsa_3$rms      <- as.numeric(unlist(rms))
}else{
relsa_3$rms      <- round( rms,2)
}
}
vars  <- names(subdata)[!(names(subdata) %in% "day")]
return( list(delta=delta, relsa=relsa_3, testVars=vars) )
}
##### Laura Model Single Tests #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
animal       <- 1# 22 #13
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4), mypch=19)
relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,4), mypch=19)
library(RELSA)
library(RELSA)
library(RELSA)
library(RELSA)
library(RELSA)
library(RELSA)
library(RELSA)
library(RELSA)
library(RELSA)
library(ROCR)
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
### Preprocessing (normalization)
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="yes", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
levels
bsl
library(RELSA)
library(RELSA)
clc
####################
### Training the model ##############
# 1. load package
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. define the included variables in the model (vars)
# 4. define the negative variables that are "turned"
# 5. normalize the variables to a range [0;100] (relsa_norm)
# 6. calculate relsa model characteristics (relsa_baseline)
library(RELSA)
library(ROCR)
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
### Preprocessing (normalization)
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="yes", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
### Testing the model ###############
# 1. Run the baseline estimation above
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. Determine the filtered variables and build a testframe (testset)
# 4. normalize the variables to a range [0;100] (relsa_norm)
# 5. Re-scale "positive" variables (relsa_scaleTurn)
# USe actual baseline data to have a more robust reference set - aand not 100.
head(raw[raw$id==unique(raw$id)[animal],])
head(testset[testset$id==unique(testset$id)[animal],])
apply(raw[raw$day==-1, 5:dim(raw)[2]],2,FUN=mean, na.rm=TRUE)
##### Laura Model Single Tests #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
animal       <- 1# 22 #13
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4), mypch=19)
RELSA$relsa$rms
RELSA$relsa$days
length(RELSA$relsa$days)
plot( RELSA$relsa$days, RELSA$relsa$rms)
RELSA$relsa$days
RELSA$relsa$rms
dim(RELSA$relsa$rms)
plot( RELSA$relsa$days, as.numeric(RELSA$relsa$rms))
plot( RELSA$relsa$days, as.numeric(unlist(RELSA$relsa$rms)))
pre[pre$id %in% unique(pre$id)[a]]
pre$id[pre$id %in% unique(pre$id)[a]]
unique(pre$id[pre$id %in% unique(pre$id)[a]])
library(RELSA)
# Build model -------------------------------------------------------------
raw          <- postop
vars         <- c("bwc", "bur2h", "burON", "hr", "hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs")
pre          <- relsa_norm(raw,
normthese = c("bur2h", "burON", "hr", "hrv", "temp", "act", "mgs"))
refmodel     <- relsa_reference()
# Test model --------------------------------------------------------------
animal       <- 1
RELSA        <- relsa(set = pre, bsl=refmodel[[1]], a = animal,
drop=c("bw", "score", "mgs30", "mgs180"), turnvars = turnvars)
head(RELSA$relsa$rms)
plot( RELSA$relsa$days, as.numeric(unlist(RELSA$relsa$rms)),  type="b", pch=19, col="black",
main=paste("animal: ", unique(pre$id[pre$id %in% unique(pre$id)[animal]]),sep=""),
xlim=c(-1,30), ylim=c(0,1.2), xlab="day", ylab="RELSA score" )
abline(h=1, lwd=1, lty=2, col="red")
# KEEP THIS AT THE END OF THE DOCUMENT TO GENERATE A LOCAL bib FILE FOR PKGS USED
knitr::write_bib(sub("^package:", "", grep("package", search(), value=TRUE)), file='skeleton.bib')
